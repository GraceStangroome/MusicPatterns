/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SoundDrawer;

import java.io.IOException;
import java.util.List;
import java.util.Iterator;


/**
 *
 * @author Richard
 */
public class SoundDrawer {
    
    private final String DEFAULT_FILE_NAME = "/media/grace/Grace/Portfolio/Music Patterns/data.txt";

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        //Instantiate a new SoundDrawer object
        SoundDrawer g = new SoundDrawer();
        
        //Here you can choose to run either of the methods depending on which one you comment out.
        
        //g.processDataAsList();
        g.processDataAsStringArray();
    }
    

    //This method is my take on processing the data file. It will process multiple lines
    //in the file. The core output code is from the original code but the initial processing of the 
    //List data is mine.
    public void processDataAsList() {
        //Instantiate a new instance of the PythonDataLoader
        PythonDataLoader pdl = new PythonDataLoader();
        
        //This try block will catch IOExceptions generated by the PythonDataLoader should it not be possible to 
        //undertake IO actions on the file. The whole operation will be terminated.
        try {
            //Use the PythonDataLoader to read all the lines and create an array list of data for each
            List extractedDataInAList = pdl.readFileAndReturnList(DEFAULT_FILE_NAME);
            
            //This Iterator will be used to go through all the lines read from the supplied data file
            Iterator iteratorOfExtractedData = extractedDataInAList.iterator();
            while(iteratorOfExtractedData.hasNext()) {
                //From the current data row, extract the List of data values
                List dataInCurrentRow = (List)iteratorOfExtractedData.next();
                
                //This Iterator is used to go through each data value in the current row
                Iterator iteratorOfDataInCurrentRow = dataInCurrentRow.iterator();
                
                while(iteratorOfDataInCurrentRow.hasNext()) {
                    //Extract the current data value in the current row. The Iterator returns an object
                    //of the Object class - it therefore has to be cast to a String - hence (String)
                    String rawValueOfData = (String)iteratorOfDataInCurrentRow.next();
                    
                    //This try block catches NumberFormatExceptions generated by Integer.parseInt() should the
                    //raw data value not be parseable ie it's got a character in it.
                    //We will not stop the whole processing in this case, just reject the value being processed
                    //and move on to the next one.
                    try {
                        int valueAsInteger = Integer.parseInt(rawValueOfData);
                        int valueAsAbs     = Math.abs(valueAsInteger);
                        
                        //These are here just for testing purposes
                        System.out.println("raw content is " + rawValueOfData);
                        System.out.println("value as an Integer is " + valueAsInteger);
                        System.out.println("value as an abs Integer is " + valueAsAbs);
                        
                       

                        if(valueAsInteger < -182) {
                          //fill(0, 89, 132);
                          //ellipse(size, size, size, size);
                          //println("I am reaching this line of code 2");
                        } 
                        else if(valueAsInteger < -109) { 
                          //fill(105, 94, 171);
                          //ellipse(size, size, size, size);
                          //println("I am reaching this line of code 3");
                        }
                        else if (valueAsInteger < -36) {
                          //fill(179, 91, 171);
                          //ellipse(size, size, size, size);
                          //println("I am reaching this line of code 4");
                        }
                        else if(valueAsInteger < 37) {
                          //fill (239, 91, 148);
                          //ellipse(size, size, size, size);
                          //println("I am reaching this line of code 5");
                        }
                        else if(valueAsInteger < 110) {
                          //fill(255, 111, 110);
                          //ellipse(size, size, size, size);
                          //println("I am reaching this line of code 6");
                        }
                        else if (valueAsInteger < 183) {
                          //fill(255, 152, 64);
                          //ellipse(size, size, size, size);
                          //println("I am reaching this line of code 7");
                        }
                        else {
                          //fill(255, 200, 0);
                          //ellipse(size, size, size, size);
                          //println("I am reaching this line of code 8");
                        }
                    }
                    catch (NumberFormatException nfe) {
                        //Temporary method of identifying the bad value - better to use proper logging 
                        //methods to record this.
                        System.out.println("Unable to parseInt the data - value was " + rawValueOfData);
                    }
                }
            }

        }
        catch (IOException ioe) {
                ioe.printStackTrace();
        }
        
    }
    
    //This method pretty much replicates what was in the original code
    //As the loadStrings() method is unavailable I have used my PythonDataLoader but this time
    //just returned a string array.
    //I've not done anything clever with this - just done what was needed to make it work.
    public void processDataAsStringArray() {
        PythonDataLoader pdl = new PythonDataLoader();
        
        try {
            String[] data = pdl.readFileAndReturnStringArray(DEFAULT_FILE_NAME);
            
            int i =0;

            for(int n = 20; n > 0; n--) {   
           

                String rawValueOfData = data[i];
                int valueAsInteger = Integer.parseInt(rawValueOfData);
                int valueAsAbs     = Math.abs(valueAsInteger);
                System.out.println("raw content is " + rawValueOfData);
                System.out.println("value as an Integer is " + valueAsInteger);
                System.out.println("value as an abs Integer is " + valueAsAbs);

                if(valueAsInteger < -182) {
                  //fill(0, 89, 132);
                  //ellipse(size, size, size, size);
                  //println("I am reaching this line of code 2");
                } 
                else if(valueAsInteger < -109) { 
                  //fill(105, 94, 171);
                  //ellipse(size, size, size, size);
                  //println("I am reaching this line of code 3");
                }
                else if (valueAsInteger < -36) {
                  //fill(179, 91, 171);
                  //ellipse(size, size, size, size);
                  //println("I am reaching this line of code 4");
                }
                else if(valueAsInteger < 37) {
                  //fill (239, 91, 148);
                  //ellipse(size, size, size, size);
                  //println("I am reaching this line of code 5");
                }
                else if(valueAsInteger < 110) {
                  //fill(255, 111, 110);
                  //ellipse(size, size, size, size);
                  //println("I am reaching this line of code 6");
                }
                else if (valueAsInteger < 183) {
                  //fill(255, 152, 64);
                  //ellipse(size, size, size, size);
                  //println("I am reaching this line of code 7");
                }
                else {
                  //fill(255, 200, 0);
                  //ellipse(size, size, size, size);
                  //println("I am reaching this line of code 8");
                }
                i++; 
            }
             

        }
        catch (Exception e) {
                e.printStackTrace();
        }
                
    }
    
}
